from aiogram import types
from loguru import logger
import datetime
from db.models import User
from db.queryes import verification
from .weather import get_weather_for_week, get_weather_by_city_for_date
from .keyboard import main_keyboard, city_keyboard, inline_keyboard_for_subscribe
from .city import city_list, city_to_eng
from .loader import bot, session, dp


@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    if await verification(message.from_user.id):
        await bot.send_message(
            message.chat.id,
            f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}!",
            reply_markup=main_keyboard()
        )
    else:
        name = message.from_user.first_name \
               or message.from_user.username \
               or message.from_user.last_name \
               or ""
        new_user = User(id=message.from_user.id, name=name, city="Kivy", subscribe=True)
        with session() as s:
            s.add(new_user)
            s.commit()
            logger.info(f"New user: {message.from_user.id}")
        await bot.send_message(
            message.chat.id,
            f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}!")
        await change_city(message)


@dp.message_handler(lambda message: message.text in city_list)
async def new_city(message: types.Message) -> None:
    city = city_to_eng.get(message.text)
    with session() as s:
        user = s.query(User).filter(User.id == message.from_user.id).first()
        if user:
            user.city = city
            s.commit()
    await bot.send_message(
        message.chat.id,
        f"–í–∏ –∑–º—ñ–Ω–∏–ª–∏ –º—ñ—Å—Ç–æ –Ω–∞ {message.text}",
        reply_markup=main_keyboard()
    )


@dp.message_handler(commands=["help"])
async def help(message: types.Message) -> None:
    await bot.send_message(
        message.chat.id,
        f"–í–≤–µ–¥—ñ—Ç—å /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º\n"
        f"–í–≤–µ–¥—ñ—Ç—å /weather –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≥–æ–¥–∏ –∑–∞—Ä–∞–∑\n"
        f"–í–≤–µ–¥—ñ—Ç—å /day –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≥–æ–¥–∏ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ\n"
        f"–í–≤–µ–¥—ñ—Ç—å /rain –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∏ –±—É–¥–µ –¥–æ—â\n"
        f"–í–≤–µ–¥—ñ—Ç—å /weather_for_week –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≥–æ–¥–∏ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å\n"
        f"–í–≤–µ–¥—ñ—Ç—å /subscribe –¥–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É\n"
        f"–í–≤–µ–¥—ñ—Ç—å /unsubscribe –¥–ª—è –≤—ñ–¥–ø–∏—Å–∫–∏ –≤—ñ–¥ —Ä–æ–∑—Å–∏–ª–∫–∏\n"
        f"–í–≤–µ–¥—ñ—Ç—å /about –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –±–æ—Ç–∞\n"
        f"–í–≤–µ–¥—ñ—Ç—å /help –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–≤—ñ–¥–∫–∏\n"
    )


@dp.message_handler(lambda message: message.text == "–ó–º—ñ–Ω–∏—Ç–∏ –º—ñ—Å—Ç–æ")
async def change_city(message: types.Message) -> None:
    await bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ", reply_markup=city_keyboard(city_list))


@dp.message_handler(commands=["weather"])
@dp.message_handler(lambda message: message.text == "–ü–æ–≥–æ–¥–∞ –∑–∞—Ä–∞–∑")
async def weather(message: types.Message) -> None:
    city = session.query(User).filter(User.id == message.from_user.id).first().city
    data = await get_weather_by_city_for_date(city, datetime.date.today())

    await bot.send_message(message.chat.id, text=data['current']['condition']['text'] + '\n'
                                                 + f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data['current']['temp_c']}¬∞C\n")


@dp.message_handler(lambda message: message.text == "–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ")
@dp.message_handler(commands=["day"])
async def day(message: types.Message) -> None:
    city = session.query(User).filter(User.id == message.from_user.id).first().city
    data = await get_weather_by_city_for_date(city, datetime.date.today())
    text = ''
    for hour in data['forecast']['forecastday'][0]['hour'][8:22]:
        text += f"{hour['time']} | {hour['temp_c']}¬∞C | {hour['condition']['text']}\n"

    await bot.send_message(message.chat.id, text=text)


@dp.message_handler(lambda message: message.text == "–ß–∏ –±—É–¥–µ –¥–æ—â?")
@dp.message_handler(commands=["rain"])
async def rain(message: types.Message) -> None:
    city = session.query(User).filter(User.id == message.from_user.id).first().city
    data = await get_weather_by_city_for_date(city, datetime.date.today())
    will_it_rain = data["forecast"]["forecastday"][0]["day"]["daily_will_it_rain"]

    await bot.send_message(message.chat.id,
                           "–°—å–æ–≥–æ–¥–Ω—ñ –±—É–¥–µ –¥–æ—â" if will_it_rain == 1 else "–°—å–æ–≥–æ–¥–Ω—ñ –¥–æ—â—É –Ω–µ –±—É–¥–µ")


@dp.message_handler(lambda message: message.text == "–ü–æ–≥–æ–¥–∞ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å")
@dp.message_handler(commands=["weather_for_day"])
async def weather_for_week(message: types.Message) -> None:
    city = session.query(User).filter(User.id == message.from_user.id).first().city
    text = await get_weather_for_week(city)

    await bot.send_message(message.chat.id, text=text)


async def subscribe(message: types.Message) -> None:
    with session() as s:
        user = s.query(User).filter(User.id == message.from_user.id).first()
        if user:
            user.subscribe = True
            s.commit()
    await bot.send_message(
        message.chat.id,
        f"–í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É",
        reply_markup=main_keyboard()
    )


async def unsubscribe(message: types.Message) -> None:
    with session() as s:
        user = s.query(User).filter(User.id == message.from_user.id).first()
        if user:
            user.subscribe = False
            s.commit()
    await bot.send_message(
        message.chat.id,
        f"–í–∏ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—å –≤—ñ–¥ —Ä–æ–∑—Å–∏–ª–∫–∏",
        reply_markup=main_keyboard()
    )


@dp.message_handler()
async def unknown_message(message: types.Message) -> None:
    await bot.send_message(message.chat.id, "–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ—ó –∫–æ–º–∞–Ω–¥–∏ üòî")
    await bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å /help –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏", reply_markup=main_keyboard())


async def send_weather_to_subscribers() -> None:
    with session() as s:
        users = s.query(User).filter(User.subscribe == True).all()

        for user in users:
            date = datetime.date.today() + datetime.timedelta(days=1)
            data = await get_weather_by_city_for_date(user.city, date)
            await bot.send_message(user.id,
                                   f"–ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n"
                                   f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data['forecast']['forecastday'][0]['day']['maxtemp_c']}¬∞C\n"
                                   f"–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data['forecast']['forecastday'][0]['day']['mintemp_c']}¬∞C\n"
                                   f"–û–ø–∞–¥–∏: {data['forecast']['forecastday'][0]['day']['daily_chance_of_rain']}%\n",
                                   reply_markup=inline_keyboard_for_subscribe()
                                   )
        logger.info(f"Weather sent, to {len(users)} users, at {datetime.datetime.now()}")